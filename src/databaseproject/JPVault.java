package databaseproject;
import javax.swing.*;
import java.awt.event.*;
import javax.swing.table.DefaultTableModel;
import java.sql.*;
import java.util.*;
import java.io.*;
import javax.swing.table.*;

/**
 *
 * @author steph
 */
public class JPVault extends javax.swing.JFrame 
{
    //connect to the database
    public Connection getConnection() throws SQLException
    {
        Properties props = new Properties();
        InputStream input = getClass().getClassLoader().getResourceAsStream("dbConn.properties");
        
        try
        {
            props.load(input);
        } catch (IOException e)
        {
            e.printStackTrace();
            return null;
        }
        
        
        String user = props.getProperty("user");
        String password = props.getProperty("password");
        String dburl = props.getProperty("dburl");
        
        //connect to database
        return DriverManager.getConnection(dburl, user, password);        
    }
    
    private String userType;
    private String idNum;
    
    /**
     * Creates new form JPVault
     */
    public JPVault(String userType, String idNum) 
    {
        this.userType = userType;
        this.idNum = idNum;
        
        initComponents();
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        
    }
    
    public void showMainPanel(String userType)
    {
        configureTabs(userType);
        
        //hide buttons for employee users
        if("employee".equalsIgnoreCase(userType))
        {
            addClient.setVisible(false);
            deleteClient.setVisible(false);
            addAssignmentBtn.setVisible(false);
            deleteAssignmentBtn.setVisible(false);
        }
        
        this.setContentPane(TopPanel);
        TopPanel.setVisible(true);
        this.revalidate();
        this.repaint();
        this.pack();
    }
    
    public void configureTabs(String userType)
    {
        //if the user is an employee, only view assignment and client tabs
        if("employee".equalsIgnoreCase(userType))
        {
            TopPanel.remove(employeesPanel);
            TopPanel.remove(shiftswapPanel);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        TopPanel = new javax.swing.JTabbedPane();
        employeesPanel = new javax.swing.JPanel();
        employeesPane = new javax.swing.JScrollPane();
        employeesTable = new javax.swing.JTable();
        addEmployee = new javax.swing.JButton();
        deleteEmployee = new javax.swing.JButton();
        emplogoutButton = new javax.swing.JButton();
        clientsPanel = new javax.swing.JPanel();
        clientsPane = new javax.swing.JScrollPane();
        clientsTable = new javax.swing.JTable();
        addClient = new javax.swing.JButton();
        deleteClient = new javax.swing.JButton();
        clientlogoutButton = new javax.swing.JButton();
        assignmentsPanel = new javax.swing.JPanel();
        assignmentsPane = new javax.swing.JScrollPane();
        assignmentsTable = new javax.swing.JTable();
        addAssignmentBtn = new javax.swing.JButton();
        deleteAssignmentBtn = new javax.swing.JButton();
        assignlogoutButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        searchTF = new javax.swing.JTextField();
        filterBox = new javax.swing.JComboBox<>();
        resetFilterBtn = new javax.swing.JButton();
        shiftswapPanel = new javax.swing.JPanel();
        shiftswapPane = new javax.swing.JScrollPane();
        shiftswapTable = new javax.swing.JTable();
        addshiftswapBtn = new javax.swing.JButton();
        deleteshiftswapBtn = new javax.swing.JButton();
        shiftswaplogoutButton = new javax.swing.JButton();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("JD Vault");

        TopPanel.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                TopPanelStateChanged(evt);
            }
        });
        TopPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TopPanelMouseClicked(evt);
            }
        });

        employeesPanel.setForeground(new java.awt.Color(0, 204, 255));

        employeesPane.setBackground(new java.awt.Color(51, 51, 51));
        employeesPane.setForeground(new java.awt.Color(255, 204, 0));

        employeesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Employee ID", "Name", "Contact Info", "Armed", "Hourly Rate", "Role", "Certification"
            }
        ));
        employeesTable.setGridColor(new java.awt.Color(51, 51, 51));
        employeesTable.setSelectionForeground(new java.awt.Color(51, 51, 51));
        employeesPane.setViewportView(employeesTable);
        if (employeesTable.getColumnModel().getColumnCount() > 0) {
            employeesTable.getColumnModel().getColumn(1).setResizable(false);
        }

        addEmployee.setText("Add employee");
        addEmployee.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addEmployeeMouseClicked(evt);
            }
        });
        addEmployee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addEmployeeActionPerformed(evt);
            }
        });

        deleteEmployee.setText("Delete Employee");
        deleteEmployee.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deleteEmployeeMouseClicked(evt);
            }
        });

        emplogoutButton.setText("Logout");
        emplogoutButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                emplogoutButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout employeesPanelLayout = new javax.swing.GroupLayout(employeesPanel);
        employeesPanel.setLayout(employeesPanelLayout);
        employeesPanelLayout.setHorizontalGroup(
            employeesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(employeesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(employeesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(employeesPane)
                    .addGroup(employeesPanelLayout.createSequentialGroup()
                        .addComponent(addEmployee, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteEmployee, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(411, 411, 411)
                        .addComponent(emplogoutButton, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)))
                .addContainerGap())
        );
        employeesPanelLayout.setVerticalGroup(
            employeesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(employeesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(employeesPane, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(employeesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deleteEmployee, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(emplogoutButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(addEmployee, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(430, 430, 430))
        );

        TopPanel.addTab("Employees", employeesPanel);
        employeesPanel.getAccessibleContext().setAccessibleName("Employees");

        clientsPanel.setToolTipText("");

        clientsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Client ID", "Client Name", "Client Number", "Location", "Client Email", "Notes"
            }
        ));
        clientsPane.setViewportView(clientsTable);

        addClient.setText("Add Client");
        addClient.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addClientMouseClicked(evt);
            }
        });

        deleteClient.setText("Delete Client");
        deleteClient.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deleteClientMouseClicked(evt);
            }
        });

        clientlogoutButton.setText("Logout");
        clientlogoutButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clientlogoutButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout clientsPanelLayout = new javax.swing.GroupLayout(clientsPanel);
        clientsPanel.setLayout(clientsPanelLayout);
        clientsPanelLayout.setHorizontalGroup(
            clientsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(clientsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(clientsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(clientsPane, javax.swing.GroupLayout.DEFAULT_SIZE, 722, Short.MAX_VALUE)
                    .addGroup(clientsPanelLayout.createSequentialGroup()
                        .addComponent(addClient, javax.swing.GroupLayout.DEFAULT_SIZE, 116, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteClient, javax.swing.GroupLayout.DEFAULT_SIZE, 116, Short.MAX_VALUE)
                        .addGap(388, 388, 388)
                        .addComponent(clientlogoutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        clientsPanelLayout.setVerticalGroup(
            clientsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(clientsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(clientsPane, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(clientsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addClient, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(deleteClient, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(clientlogoutButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(414, 414, 414))
        );

        TopPanel.addTab("Clients", clientsPanel);

        assignmentsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Assignment ID", "Location", "Client Name", "Start Time", "End Time", "Client ID", "Duration", "Employee ID", "Role", "Assignments"
            }
        ));
        assignmentsPane.setViewportView(assignmentsTable);

        addAssignmentBtn.setText("Add Assignment");
        addAssignmentBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addAssignmentBtnMouseClicked(evt);
            }
        });

        deleteAssignmentBtn.setText("Delete Assignment");
        deleteAssignmentBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deleteAssignmentBtnMouseClicked(evt);
            }
        });

        assignlogoutButton.setText("Logout");
        assignlogoutButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                assignlogoutButtonMouseClicked(evt);
            }
        });

        jLabel1.setText("Search and Filter:");

        searchTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                searchTFKeyPressed(evt);
            }
        });

        filterBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "AssignmentID", "Location", "ClientID", "EmployeeID" }));
        filterBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                filterBoxKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                filterBoxKeyReleased(evt);
            }
        });

        resetFilterBtn.setText("Reset");
        resetFilterBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                resetFilterBtnMouseClicked(evt);
            }
        });
        resetFilterBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetFilterBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout assignmentsPanelLayout = new javax.swing.GroupLayout(assignmentsPanel);
        assignmentsPanel.setLayout(assignmentsPanelLayout);
        assignmentsPanelLayout.setHorizontalGroup(
            assignmentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(assignmentsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(assignmentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(assignmentsPane)
                    .addGroup(assignmentsPanelLayout.createSequentialGroup()
                        .addComponent(addAssignmentBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteAssignmentBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(386, 386, 386)
                        .addComponent(assignlogoutButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(assignmentsPanelLayout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(filterBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchTF)
                        .addGap(18, 18, 18)
                        .addComponent(resetFilterBtn)
                        .addGap(339, 339, 339)))
                .addContainerGap())
        );
        assignmentsPanelLayout.setVerticalGroup(
            assignmentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(assignmentsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(assignmentsPane, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9)
                .addGroup(assignmentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(assignlogoutButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(assignmentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(deleteAssignmentBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(addAssignmentBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(assignmentsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addGroup(assignmentsPanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(filterBox)
                    .addComponent(searchTF)
                    .addComponent(resetFilterBtn))
                .addGap(419, 419, 419))
        );

        TopPanel.addTab("Assignments", assignmentsPanel);

        shiftswapTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Swap ID", "New Emp ID", "Assignment Id", "DateOfSwap"
            }
        ));
        shiftswapPane.setViewportView(shiftswapTable);

        addshiftswapBtn.setText("Add Shift Swap");
        addshiftswapBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addshiftswapBtnMouseClicked(evt);
            }
        });

        deleteshiftswapBtn.setText("Delete Shift Swap");
        deleteshiftswapBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deleteshiftswapBtnMouseClicked(evt);
            }
        });

        shiftswaplogoutButton.setText("Logout");
        shiftswaplogoutButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                shiftswaplogoutButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout shiftswapPanelLayout = new javax.swing.GroupLayout(shiftswapPanel);
        shiftswapPanel.setLayout(shiftswapPanelLayout);
        shiftswapPanelLayout.setHorizontalGroup(
            shiftswapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(shiftswapPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(shiftswapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(shiftswapPane, javax.swing.GroupLayout.DEFAULT_SIZE, 722, Short.MAX_VALUE)
                    .addGroup(shiftswapPanelLayout.createSequentialGroup()
                        .addComponent(addshiftswapBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteshiftswapBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(shiftswaplogoutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        shiftswapPanelLayout.setVerticalGroup(
            shiftswapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(shiftswapPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(shiftswapPane, javax.swing.GroupLayout.DEFAULT_SIZE, 387, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(shiftswapPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addshiftswapBtn)
                    .addComponent(deleteshiftswapBtn)
                    .addComponent(shiftswaplogoutButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(237, 237, 237))
        );

        TopPanel.addTab("Shift Swap", shiftswapPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(TopPanel)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(TopPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(249, Short.MAX_VALUE))
        );

        TopPanel.getAccessibleContext().setAccessibleName("Employees");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    private void TopPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TopPanelMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_TopPanelMouseClicked

    
    private void TopPanelStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_TopPanelStateChanged

        int selectedIndex = TopPanel.getSelectedIndex();
        
        System.out.println("TopPanelStateChanged triggered. userType: " + userType);
        
    if(userType.equalsIgnoreCase("admin")) //if the user is a admin
    {
        switch(selectedIndex)
        {
            case 0: //Employees Tab
                String[] empCols = {
                    "EmployeeID",
                    "Name",
                    "ContactInfo",
                    "Armed",
                    "HourlyRate",
                    "Role",
                    "Certification"};
                DefaultTableModel empModel = new DefaultTableModel(new Object[][]{}, empCols);
                employeesTable.setModel(empModel);
                loadTableData(employeesTable, "SELECT * FROM employee", empCols);
                break;
            case 1: //Clients Tab
                String[] clientCols = {
                    "ClientID",
                    "ClientName",
                    "ClientNumber",
                    "Location",
                    "ClientEmail",
                    "Notes"};
                DefaultTableModel clientModel = new DefaultTableModel(new Object[][]{}, clientCols);
                clientsTable.setModel(clientModel);
                loadTableData(clientsTable, "SELECT * FROM client", clientCols);
                break;
            case 2: //Assignments Tab
                String[] assignmentCols = {
                    "AssignmentID",
                    "Location",
                    "ClientName",
                    "StartTime",
                    "EndTime",
                    "ClientID",
                    "Duration",
                    "EmployeeID",
                    "Role",
                    "shiftSwap"};
                DefaultTableModel assignModel = new DefaultTableModel(new Object[][]{}, assignmentCols);
                assignmentsTable.setModel(assignModel);
                loadTableData(assignmentsTable, "SELECT * FROM assignment", assignmentCols);
                break;
            case 3: //Shift Swap Tab
                String[] shiftSwapCols = {
                    "SwapID",
                    "NewEmpID",
                    "AssignmentID",
                    "DateOfSwap",};
                DefaultTableModel shiftswapModel = new DefaultTableModel(new Object[][]{}, shiftSwapCols);
                shiftswapTable.setModel(shiftswapModel);
                loadTableData(shiftswapTable, "SELECT * FROM shiftswap", shiftSwapCols);
                break;
            default:
                System.out.println("Unrecognized Tab. Please try again.");
        } //end switch 
        } //end if
        else if(userType.equalsIgnoreCase("employee")) //if the user is an employee
        {
            switch(selectedIndex)
            {
                case 0: //Clients Tab
                    String[] clientCols = {
                        "ClientID",
                        "ClientName",
                        "ClientNumber",
                        "Location",
                        "ClientEmail",
                        "Notes"};
                    DefaultTableModel clientModel = new DefaultTableModel(new Object[][]{}, clientCols);
                    clientsTable.setModel(clientModel);
                    loadTableData(clientsTable, "SELECT * FROM client", clientCols);
                    break;
                case 1:
                    //Assignments Tab
                    String[] assignmentCols = {
                        "AssignmentID",
                        "Location",
                        "ClientName",
                        "StartTime",
                        "EndTime",
                        "ClientID",
                        "Duration",
                        "EmployeeID",
                        "Role",
                        "shiftSwap"};
                    DefaultTableModel assignModel = new DefaultTableModel(new Object[][]{}, assignmentCols);
                    assignmentsTable.setModel(assignModel);
                    loadTableData(assignmentsTable, "SELECT * FROM assignment", assignmentCols);
                    break;
                default:
                    System.out.println("Unrecognized Tab. Please try again.");
                    break;
            }//end switch
                
        } //end if-else
    }//GEN-LAST:event_TopPanelStateChanged

    private void addEmployeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addEmployeeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_addEmployeeActionPerformed

    private void addEmployeeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addEmployeeMouseClicked
        addEmployee dialog = new addEmployee(this, true);
        dialog.setLocationRelativeTo(this);
        dialog.setVisible(true);
        
        //refresh the table after new employee is added
        if ("admin".equalsIgnoreCase(userType))
        {
            String[] empCols = {
                    "EmployeeID",
                    "Name",
                    "ContactInfo",
                    "Armed",
                    "HourlyRate",
                    "Role",
                    "Certification"};
                DefaultTableModel empModel = new DefaultTableModel(new Object[][]{}, empCols);
                employeesTable.setModel(empModel);
                loadTableData(employeesTable, "SELECT * FROM employee", empCols);
        }
    }//GEN-LAST:event_addEmployeeMouseClicked

    
    
    private void deleteEmployeeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteEmployeeMouseClicked
        int selectedRow = employeesTable.getSelectedRow();
        
        if(selectedRow == -1)
        {
            JOptionPane.showMessageDialog(this, "Please select an employee to delete");
        }
        
        String empID = employeesTable.getValueAt(selectedRow, 0).toString();
        
        if(!canDeleteEmployee(empID))
        {
            JOptionPane.showMessageDialog(this, "Cannot delete employee, they are assigned to a shift swap.");
            return;
        }
        
        int confirm = JOptionPane.showConfirmDialog(this, "Are you sure to delete Employee ID: " + empID + "?",
                "Confirm Delete", JOptionPane.YES_NO_OPTION);
        
        if(confirm == JOptionPane.YES_NO_OPTION) 
        {
            deleteEmployeeFromDatabase(empID);
            ((DefaultTableModel) employeesTable.getModel()).removeRow(selectedRow);
            TopPanelStateChanged(null);
        }
    }//GEN-LAST:event_deleteEmployeeMouseClicked

    private void deleteEmployeeFromDatabase(String empID)
    {
        try (Connection conn = getConnection())
        {
            String sql = "DELETE FROM employee WHERE EmployeeID = ?";
            PreparedStatement stmt = conn.prepareStatement(sql);
            stmt.setString(1, empID);
            stmt.executeUpdate();
        }catch (SQLException e)
        {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Failed to delete employee from database.");
        }
    }
    
    //make sure there are no dependencies
    private boolean canDeleteEmployee(String empID) 
    {
        try (Connection conn = getConnection())
        {
            //query to find out if theres an assignment tied to an empID
            String query = "SELECT COUNT(*) FROM assignment WHERE EmployeeID = ?" +
                    " UNION ALL" + " SELECT COUNT(*) FROM shiftswap WHERE NewEmpID = ?";
            
            PreparedStatement stmt = conn.prepareStatement(query);
            stmt.setString(1, empID);
            stmt.setString(2, empID);
            
            ResultSet rs = stmt.executeQuery();
            
            while(rs.next())
            {
                if(rs.getInt(1) > 0)
                {
                    return false; //if a reference exist
                }//end if
            }//end while
            
        }catch (SQLException e)
        {
            e.printStackTrace();
        }
        
        
        return true;
    }
    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
    private void addClientMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addClientMouseClicked
        addClient dialog = new addClient(this, true);
        dialog.setLocationRelativeTo(this);
        dialog.setVisible(true);
        
        //refresh the table after new employee is added
        if ("admin".equalsIgnoreCase(userType))
        {
            String[] clientCols = {
                    "ClientID",
                    "ClientName",
                    "ClientNumber",
                    "Location",
                    "ClientEmail",
                    "Notes"};
                DefaultTableModel clientModel = new DefaultTableModel(new Object[][]{}, clientCols);
                clientsTable.setModel(clientModel);
                loadTableData(clientsTable, "SELECT * FROM client", clientCols);
        }
    }//GEN-LAST:event_addClientMouseClicked

    private void deleteClientMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteClientMouseClicked
        int selectedRow = clientsTable.getSelectedRow();
        
        if(selectedRow == -1)
        {
            JOptionPane.showMessageDialog(this, "Please select an client to delete");
        }
        
        String clientID = clientsTable.getValueAt(selectedRow, 0).toString();
        
        if(!canDeleteClient(clientID))
        {
            JOptionPane.showMessageDialog(this, "Cannot delete client, they are attached to an assignment");
            return;
        }
        
        int confirm = JOptionPane.showConfirmDialog(this, "Are you sure to delete Client ID: " + clientID + "?",
                "Confirm Delete", JOptionPane.YES_NO_OPTION);
        
        if(confirm == JOptionPane.YES_NO_OPTION) 
        {
            deleteClientFromDatabase(clientID);
            ((DefaultTableModel) clientsTable.getModel()).removeRow(selectedRow);
            TopPanelStateChanged(null);
        }
    }//GEN-LAST:event_deleteClientMouseClicked
private void deleteClientFromDatabase(String clientID)
    {
        try (Connection conn = getConnection())
        {
            String sql = "DELETE FROM client WHERE ClientID = ?";
            PreparedStatement stmt = conn.prepareStatement(sql);
            stmt.setString(1, clientID);
            stmt.executeUpdate();
        }catch (SQLException e)
        {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Failed to delete client from database.");
        }
    }
    
    private boolean canDeleteClient(String clientID) 
    {
        try (Connection conn = getConnection())
        {
            //query to find out if theres an assignment tied to an clientID
            String query = "SELECT COUNT(*) FROM assignment WHERE ClientID = ?";
            
            PreparedStatement stmt = conn.prepareStatement(query);
            stmt.setString(1, clientID);
            
            ResultSet rs = stmt.executeQuery();
            
            while(rs.next())
            {
                if(rs.getInt(1) > 0)
                {
                    return false; //if a reference exist
                }//end if
            }//end while
            
        }catch (SQLException e)
        {
            e.printStackTrace();
        }
        
        
        return true;
    }
    
    private void addshiftswapBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addshiftswapBtnMouseClicked
        addShiftSwap dialog = new addShiftSwap(this, true);
        dialog.setLocationRelativeTo(this);
        dialog.setVisible(true);
        
        //refresh the table after new employee is added
        if ("admin".equalsIgnoreCase(userType))
        {
            String[] shiftSwapCols = {
                    "SwapID",
                    "NewEmpID",
                    "AssignmentID",
                    "DateOfSwap",};
                DefaultTableModel shiftswapModel = new DefaultTableModel(new Object[][]{}, shiftSwapCols);
                shiftswapTable.setModel(shiftswapModel);
                loadTableData(shiftswapTable, "SELECT * FROM shiftswap", shiftSwapCols);
        }
    }//GEN-LAST:event_addshiftswapBtnMouseClicked

    private void deleteshiftswapBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteshiftswapBtnMouseClicked
        int selectedRow = shiftswapTable.getSelectedRow();
        
        if(selectedRow == -1)
        {
            JOptionPane.showMessageDialog(this, "Please select a shift swap to delete");
        }
        
        String swapID = shiftswapTable.getValueAt(selectedRow, 0).toString();
        
        int confirm = JOptionPane.showConfirmDialog(this, "Are you sure to delete Shift Swap ID: " + swapID + "?",
                "Confirm Delete", JOptionPane.YES_NO_OPTION);
        
        if(confirm == JOptionPane.YES_NO_OPTION) 
        {
            deleteShiftSwapFromDatabase(swapID);
            ((DefaultTableModel) shiftswapTable.getModel()).removeRow(selectedRow);
            TopPanelStateChanged(null);
        }
    }//GEN-LAST:event_deleteshiftswapBtnMouseClicked

    private void emplogoutButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_emplogoutButtonMouseClicked
        int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to log out?", "Confirm Logout", JOptionPane.YES_NO_OPTION);
        
        if (confirm == JOptionPane.YES_OPTION)
        {
            this.dispose();
            new loginForm().setVisible(true);
        }
    }//GEN-LAST:event_emplogoutButtonMouseClicked

    private void clientlogoutButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clientlogoutButtonMouseClicked
        int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to log out?", "Confirm Logout", JOptionPane.YES_NO_OPTION);
        
        if (confirm == JOptionPane.YES_OPTION)
        {
            this.dispose();
            new loginForm().setVisible(true);
        }
    }//GEN-LAST:event_clientlogoutButtonMouseClicked

    private void shiftswaplogoutButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_shiftswaplogoutButtonMouseClicked
        int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to log out?", "Confirm Logout", JOptionPane.YES_NO_OPTION);
        
        if (confirm == JOptionPane.YES_OPTION)
        {
            this.dispose();
            new loginForm().setVisible(true);
        }
    }//GEN-LAST:event_shiftswaplogoutButtonMouseClicked

    private void assignlogoutButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_assignlogoutButtonMouseClicked
        int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to log out?", "Confirm Logout", JOptionPane.YES_NO_OPTION);

        if (confirm == JOptionPane.YES_OPTION)
        {
            this.dispose();
            new loginForm().setVisible(true);
        }
    }//GEN-LAST:event_assignlogoutButtonMouseClicked

    private void deleteAssignmentBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteAssignmentBtnMouseClicked
        int selectedRow = assignmentsTable.getSelectedRow();

        if(selectedRow == -1)
        {
            JOptionPane.showMessageDialog(this, "Please select an assignment to delete");
        }

        String assignID = assignmentsTable.getValueAt(selectedRow, 0).toString();

        if(!canDeleteAssignment(assignID))
        {
            JOptionPane.showMessageDialog(this, "Cannot delete, assignment is tied to a shift swap.");
            return;
        }

        int confirm = JOptionPane.showConfirmDialog(this, "Are you sure to delete Assignment ID: " + assignID + "?",
            "Confirm Delete", JOptionPane.YES_NO_OPTION);

        if(confirm == JOptionPane.YES_NO_OPTION)
        {
            deleteAssignmentFromDatabase(assignID);
            ((DefaultTableModel) assignmentsTable.getModel()).removeRow(selectedRow);
            TopPanelStateChanged(null);
        }
    }//GEN-LAST:event_deleteAssignmentBtnMouseClicked

    private void addAssignmentBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addAssignmentBtnMouseClicked
        addAssignment dialog = new addAssignment(this, true);
        dialog.setLocationRelativeTo(this);
        dialog.setVisible(true);

        //refresh the table after new employee is added
        if ("admin".equalsIgnoreCase(userType))
        {
            String[] assignmentCols = {
                "AssignmentID",
                "Location",
                "ClientName",
                "StartTime",
                "EndTime",
                "ClientID",
                "Duration",
                "EmployeeID",
                "Role",
                "shiftSwap"};
            DefaultTableModel assignModel = new DefaultTableModel(new Object[][]{}, assignmentCols);
            assignmentsTable.setModel(assignModel);
            loadTableData(assignmentsTable, "SELECT * FROM assignment", assignmentCols);
        }
    }//GEN-LAST:event_addAssignmentBtnMouseClicked

    private void filterBoxKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_filterBoxKeyPressed
      
    }//GEN-LAST:event_filterBoxKeyPressed

    //filter function
    private void performFilter()
    {
        String filterText = searchTF.getText().trim();
        String selectedFilter = filterBox.getSelectedItem().toString();
        
        String sql = "SELECT * FROM Assignment WHERE ";
        String columnName = "";
        
        switch(selectedFilter)
        {
            case "AssignmentID":
                columnName = "AssignmentID";
                break;
            case "Location": 
                columnName = "Location";
                break;
            case "ClientID":
                columnName = "ClientID";
                break;
            case "EmployeeID":
                columnName = "EmployeeID";
                break;
            default:
                JOptionPane.showMessageDialog(this, "Invalid selection.");
                return;
                
        }//end switch case
        
        sql += columnName + " LIKE ?";
        
        try (Connection conn = getConnection())
        {
            PreparedStatement stmt = conn.prepareStatement(sql);
            
            stmt.setString(1, "%" + filterText + "%");
            ResultSet rs = stmt.executeQuery();
            
            String[] assignmentCols = {
                "AssignmentID",
                "Location",
                "ClientName",
                "StartTime",
                "EndTime",
                "ClientID",
                "Duration",
                "EmployeeID",
                "Role",
                "shiftSwap"};
            DefaultTableModel assignModel = new DefaultTableModel(new Object[][]{}, assignmentCols);
            assignmentsTable.setModel(assignModel);
            
            while(rs.next())
            {
                Object[] rowData = new Object[assignmentCols.length];
                for (int i = 0; i < assignmentCols.length; i++)
                {
                    rowData[i] = rs.getObject(assignmentCols[i]);
                }
                assignModel.addRow(rowData);
                
            }
            
            
            
        }catch (SQLException e)
        {
            e.printStackTrace();
        }
    }
    
    
    
    private void filterBoxKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_filterBoxKeyReleased
        
    }//GEN-LAST:event_filterBoxKeyReleased

    private void resetFilterBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetFilterBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_resetFilterBtnActionPerformed

    private void resetFilterBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resetFilterBtnMouseClicked
        searchTF.setText(""); //clear text box
        filterBox.setSelectedIndex(0); //resert filter box
        
        String sql = "SELECT * FROM assignment";
        
        //Refresh Table
        try (Connection conn = getConnection())
        {
            PreparedStatement stmt = conn.prepareStatement(sql);
            ResultSet rs = stmt.executeQuery();
            
            String[] assignmentCols = {
                "AssignmentID",
                "Location",
                "ClientName",
                "StartTime",
                "EndTime",
                "ClientID",
                "Duration",
                "EmployeeID",
                "Role",
                "shiftSwap"};
            DefaultTableModel assignModel = new DefaultTableModel(new Object[][]{}, assignmentCols);
            assignmentsTable.setModel(assignModel);
            loadTableData(assignmentsTable, "SELECT * FROM assignment", assignmentCols);
        } catch (SQLException e)
        {
            e.printStackTrace();
        }
           
    }//GEN-LAST:event_resetFilterBtnMouseClicked

    private void searchTFKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchTFKeyPressed
          if(evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
            performFilter();
        }
    }//GEN-LAST:event_searchTFKeyPressed

    private void deleteShiftSwapFromDatabase(String swapID)
    {
        try (Connection conn = getConnection())
        {
            String sql = "DELETE FROM shiftswap WHERE SwapID = ?";
            PreparedStatement stmt = conn.prepareStatement(sql);
            stmt.setString(1, swapID);
            stmt.executeUpdate();
        }catch (SQLException e)
        {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Failed to delete Shift Swap from database.");
        }
    }
    
    private void deleteAssignmentFromDatabase(String assignID)
    {
        try (Connection conn = getConnection())
        {
            String sql = "DELETE FROM assignment WHERE AssignmentID = ?";
            PreparedStatement stmt = conn.prepareStatement(sql);
            stmt.setString(1, assignID);
            stmt.executeUpdate();
        }catch (SQLException e)
        {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Failed to delete assignment from database.");
        }
    }
    
    //make sure there are no dependencies
    private boolean canDeleteAssignment(String assignID) 
    {
        try (Connection conn = getConnection())
        {
            //query to find out if theres an assignment tied to an AssignmentID
            String query = "SELECT COUNT(*) FROM shiftswap WHERE AssignmentID = ?";
            
            PreparedStatement stmt = conn.prepareStatement(query);
            stmt.setString(1, assignID);
            
            ResultSet rs = stmt.executeQuery();
            
            while(rs.next())
            {
                if(rs.getInt(1) > 0)
                {
                    return false; //if a reference exist
                }//end if
            }//end while
            
        }catch (SQLException e)
        {
            e.printStackTrace();
        }
        
        
        return true;
    }
    
    
    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
    
    public void loadTableData(JTable table, String sql, String[] colNames)
    {
        try(Connection conn = getConnection(); 
                PreparedStatement stmt = conn.prepareStatement(sql);
                ResultSet rs = stmt.executeQuery() )
        {
            DefaultTableModel model = (DefaultTableModel) table.getModel();
            model.setRowCount(0);
            
            while(rs.next())
            {
                Object[] row = new Object[colNames.length];
                for(int i = 0; i< colNames.length; i++)
                {
                    row[i] = rs.getObject(colNames[i]);
                }
                model.addRow(row);
            }
            
        }catch (SQLException e)
        {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Failed to load data.");
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) 
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JPVault.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JPVault.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JPVault.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JPVault.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() 
        {
            public void run() 
            {
                loginForm loginPanel = new loginForm();
                JFrame loginFrame = new JFrame("Login Form");
                loginFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                loginFrame.add(loginPanel);
                loginFrame.pack();
                loginFrame.setVisible(true);
            }
        }
        );
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane TopPanel;
    private javax.swing.JButton addAssignmentBtn;
    private javax.swing.JButton addClient;
    private javax.swing.JButton addEmployee;
    private javax.swing.JButton addshiftswapBtn;
    private javax.swing.JButton assignlogoutButton;
    private javax.swing.JScrollPane assignmentsPane;
    private javax.swing.JPanel assignmentsPanel;
    private javax.swing.JTable assignmentsTable;
    private javax.swing.JButton clientlogoutButton;
    private javax.swing.JScrollPane clientsPane;
    private javax.swing.JPanel clientsPanel;
    private javax.swing.JTable clientsTable;
    private javax.swing.JButton deleteAssignmentBtn;
    private javax.swing.JButton deleteClient;
    private javax.swing.JButton deleteEmployee;
    private javax.swing.JButton deleteshiftswapBtn;
    private javax.swing.JButton emplogoutButton;
    private javax.swing.JScrollPane employeesPane;
    private javax.swing.JPanel employeesPanel;
    private javax.swing.JTable employeesTable;
    private javax.swing.JComboBox<String> filterBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton resetFilterBtn;
    private javax.swing.JTextField searchTF;
    private javax.swing.JScrollPane shiftswapPane;
    private javax.swing.JPanel shiftswapPanel;
    private javax.swing.JTable shiftswapTable;
    private javax.swing.JButton shiftswaplogoutButton;
    // End of variables declaration//GEN-END:variables
}//end class
